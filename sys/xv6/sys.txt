# XV6 system call descriptions

# File open flags
define O_RDONLY		0
define O_WRONLY		1
define O_RDWR		2
define O_CREATE		0x200
define O_TRUNC		0x400

# File types
define T_DIR		1
define T_FILE		2
define T_DEV		3

# Resources
resource xv6_fd[int32]: 0xffffffffffffffff
resource xv6_pid[int32]: 0xffffffffffffffff

# File open flags
xv6_open_flags = O_RDONLY, O_WRONLY, O_RDWR, O_CREATE, O_TRUNC

# Process management
fork() xv6_pid
exit(status int32)
wait() xv6_pid
getpid() xv6_pid

# File operations  
open(file ptr[in, filename], omode flags[xv6_open_flags, int32]) xv6_fd
close(fd xv6_fd)
read(fd xv6_fd, buf buffer[out], count len[buf])
write(fd xv6_fd, buf buffer[in], count len[buf])

# File metadata
fstat(fd xv6_fd, st ptr[out, xv6_stat])

# File system operations
chdir(path ptr[in, filename])
mkdir(path ptr[in, filename])
mknod(path ptr[in, filename], major int16, minor int16)
unlink(path ptr[in, filename])
link(old ptr[in, filename], new ptr[in, filename])

# Process operations
exec(path ptr[in, filename], argv ptr[in, array[ptr[in, string]]])
kill(pid xv6_pid)
sleep(n int32)
uptime()

# I/O operations
dup(fd xv6_fd) xv6_fd
pipe(p ptr[out, array[xv6_fd, 2]])

# Memory management  
sbrk(n intptr)

# Data structures
xv6_stat {
	dev	int16
	ino	int16
	type	int16
	nlink	int16
	size	int64
}